::: math >>> pi     #importing pi from math
::: urllib >>> *    #importing all from urllib
:::>>> random       #importing random
:::>>> random:rnd   #importing random as rnd


# FUNCTION STATEMENT
# function beginning
# ::>> return1, returnN > functionName(param1, param2 = 3, *parList, **parDict)
# function ending
# <<::functionName
::>> a1,a2,a3 > myfunction(params)
  [do something]
<<::myfunction



###################################### FOR BLOCK
# LABELS are a little comment to identify blocks
>>label1.for i=first:upper:step
  [do something]
<<label1.for

#is equivalent to
>>label1.for i=first:upper:step
  [do something]
<<.for

#is equivalent to
>>.for i=first:upper:step
  [do something]
<<.for

# INLINE (":")
#is equivalent to
>>.for i=first:upper:step: [do something]
<<.for

#is equivalent to
>>.for i=first:last:step: [do something] <<.for

# VALUES
[i=first:last] means step=1
# step > 0
[i=first:last:step] means while(i=first; i<last; i+=step) of C language
# step < 0
[i=first:last:step] means while(i=first; i>last; i-=step) of C language

# NESTED
sum = 0
>>0.for i = 1:10
  >>1.for j = 2:10
    >>2.for k = -12:20: sum += i+j+k <<.for
  <<.for
<<.for

# alternative
sum = 0
>>0.for i = 1:10
  >>1.for j = 2:10
    >>2.for k = -12:20: sum += i+j+k 
    <<2.for
  <<1.for
<<0.for



###################################### if BLOCK



>>label1.if i>10
      #do something
    >>label1.elif i<9: return
    >>label1.else
      #do something else
    <<label1.if
    >>label2.for j:3:5
      #do something
    <<label2.for